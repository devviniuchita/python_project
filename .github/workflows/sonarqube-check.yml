name: SonarQube Code Quality Analysis

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

jobs:
  sonarqube-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
      # 1. Checkout repository with full history
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref || github.ref }}

      # 2. Setup Python environment
      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      # 3. Install dependencies
      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install pytest pytest-cov

      # 4. Run linting and type checking
      - name: 🧹 Run linting checks
        run: |
          # Black code formatting check
          black --check src tests || true

          # isort import sorting check
          isort --check-only src tests || true

          # Flake8 style guide enforcement
          flake8 src tests || true

          # mypy type checking (strict mode)
          mypy src --strict || true
        continue-on-error: true

      # 5. Generate test coverage report
      - name: 📊 Generate coverage report
        run: |
          pytest \
            --cov=src \
            --cov-report=xml:coverage.xml \
            --cov-report=html:htmlcov \
            --cov-report=term \
            --verbose \
            tests/
        env:
          PYTHONPATH: ${{ github.workspace }}
        continue-on-error: true

      # 6. Upload coverage to CodeCov (optional)
      - name: 📤 Upload coverage to CodeCov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true

      # 7. SonarQube Analysis (Main Step)
      - name: 🔍 SonarQube Analysis
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_LOGIN: ${{ secrets.SONAR_TOKEN }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY || 'python_project' }}
            -Dsonar.sources=src,scripts
            -Dsonar.tests=tests
            -Dsonar.python.version=3.12
            -Dsonar.python.coverage.reportPath=coverage.xml
            -Dsonar.exclusions=**/__pycache__/**,**/.venv/**,**/migrations/**
            -Dsonar.coverage.exclusions=tests/**,setup.py,**/__init__.py

      # 8. Quality Gate Status Check
      - name: ⏳ Wait for Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_LOGIN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

      # 9. Comment PR with analysis results
      - name: 💬 Comment PR with SonarQube results
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const coverageFile = './coverage.xml';

            let coverageComment = '';
            if (fs.existsSync(coverageFile)) {
              coverageComment = `\n📊 **Coverage Report Generated**\n[View HTML Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;
            }

            const body = `## 🔍 SonarQube Analysis Results\n
            ✅ Analysis completed for commit: ${{ github.sha }}\n
            📝 Project: python_project\n
            🎯 Quality Gate: See SonarQube dashboard for status\n
            ${coverageComment}\n
            [View Full Analysis](https://sonarcloud.io/dashboard?id=python_project)`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

      # 10. Build artifact with coverage
      - name: 📦 Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: |
            htmlcov/
            coverage.xml
          retention-days: 30

      # 11. Summary report
      - name: 📋 Workflow Summary
        if: always()
        run: |
          echo "### 🎯 SonarQube Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Item | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Analysis | ✅ Completed |" >> $GITHUB_STEP_SUMMARY
          echo "| Coverage | 📊 Generated |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Gate | ⏳ Check Dashboard |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View SonarQube Dashboard](https://sonarcloud.io/dashboard?id=python_project)" >> $GITHUB_STEP_SUMMARY

# ========================================
# Configuration Notes
# ========================================
#
# 1. Required GitHub Secrets:
#    - SONAR_HOST_URL: https://sonarcloud.io (for Cloud) or your server
#    - SONAR_TOKEN: Authentication token from SonarQube
#    - SONAR_ORGANIZATION: Your organization key (Cloud only)
#    - SONAR_PROJECT_KEY: Project key (default: python_project)
#
# 2. Quality Gates:
#    - Cognitive Complexity < 15
#    - Code Duplication < 3%
#    - Test Coverage > 80%
#
# 3. Triggers:
#    - Push to main/develop branches
#    - Pull requests to main/develop
#
# 4. Reports Generated:
#    - coverage.xml (SonarQube import)
#    - htmlcov/ (local viewing)
#    - GitHub Actions artifacts (30-day retention)
#
# 5. PR Integration:
#    - Automatic comment with results
#    - Quality Gate blocking PRs (if configured)
#    - Coverage comparison with base branch
