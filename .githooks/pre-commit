#!/bin/bash
# Copyright (c) 2025 Python RAG Project Team
# SPDX-License-Identifier: MIT

set -e

# Normalize SSL/TLS environment variables for the hook runtime.
# This helps when system-wide env vars point to invalid CA bundles (e.g.
# leftovers from other installers) and would otherwise break pip installs or
# tools invoked by hooks.
REPO_ROOT=$(git rev-parse --show-toplevel 2>/dev/null || pwd)
if [ -x "${REPO_ROOT}/.venv/Scripts/python.exe" ]; then
    VENV_PYTHON="${REPO_ROOT}/.venv/Scripts/python.exe"
elif [ -x "${REPO_ROOT}/.venv/bin/python" ]; then
    VENV_PYTHON="${REPO_ROOT}/.venv/bin/python"
else
    VENV_PYTHON="python"
fi

echo "üîê Validando vari√°veis TLS/CA para o hook..."
CERT_PATH="$($VENV_PYTHON - <<'PY'
import sys
try:
    import certifi
    print(certifi.where())
except Exception:
    pass
PY
)"

if [ -n "$CERT_PATH" ]; then
    export SSL_CERT_FILE="$CERT_PATH"
    export REQUESTS_CA_BUNDLE="$CERT_PATH"
    echo "  -> Usando certifi bundle em $CERT_PATH"
else
    if [ -n "$SSL_CERT_FILE" ] && [ ! -f "$SSL_CERT_FILE" ]; then
        echo "  -> SSL_CERT_FILE aponta para arquivo inexistente ($SSL_CERT_FILE). Unsetting..."
        unset SSL_CERT_FILE
    fi
    if [ -n "$REQUESTS_CA_BUNDLE" ] && [ ! -f "$REQUESTS_CA_BUNDLE" ]; then
        echo "  -> REQUESTS_CA_BUNDLE aponta para arquivo inexistente ($REQUESTS_CA_BUNDLE). Unsetting..."
        unset REQUESTS_CA_BUNDLE
    fi
    echo "  -> Certifi n√£o encontrado no venv; mantendo vari√°veis v√°lidas (se existirem)."
fi

echo "üîç Running pre-commit checks..."
echo ""

# Check if files are staged
if git diff --cached --quiet; then
    echo "‚ö†Ô∏è  No files staged for commit"
    exit 0
fi

# Get staged Python files
STAGED_PY_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.py$' || true)

if [ -z "$STAGED_PY_FILES" ]; then
    echo "‚úÖ No Python files to check"
    exit 0
fi

echo "üìù Checking Python files:"
echo "$STAGED_PY_FILES"
echo ""

# Check for copyright headers
MISSING_COPYRIGHT=()
CURRENT_YEAR=$(date +%Y)

for file in $STAGED_PY_FILES; do
    # Skip test files and __init__.py
    if [[ "$file" == *"test_"* ]] || [[ "$file" == *"__init__.py" ]]; then
        continue
    fi

    # Check if file exists (could be deleted)
    if [ ! -f "$file" ]; then
        continue
    fi

    # Check for copyright
    if ! grep -q "Copyright (c)" "$file"; then
        MISSING_COPYRIGHT+=("$file")
    fi
done

if [ ${#MISSING_COPYRIGHT[@]} -ne 0 ]; then
    echo "‚ùå The following files are missing copyright headers:"
    printf '%s\n' "${MISSING_COPYRIGHT[@]}"
    echo ""
    echo "Run: python scripts/add_copyright_headers.py"
    echo "Or add manually:"
    echo ""
    echo '"""'
    echo 'Module description.'
    echo ""
    echo "Copyright (c) $CURRENT_YEAR Python RAG Project Team"
    echo "SPDX-License-Identifier: MIT"
    echo 'Author: Vin√≠cius Uchita <viniciusuchita@gmail.com>'
    echo '"""'
    echo ""
    exit 1
fi

echo "‚úÖ All files have copyright headers"
echo ""

# Run formatters
echo "üé® Running Black..."
black --check $STAGED_PY_FILES || {
    echo "‚ùå Black formatting failed"
    echo "Run: black src/ tests/"
    exit 1
}

echo "‚úÖ Black passed"
echo ""

echo "üì¶ Running isort..."
isort --check-only $STAGED_PY_FILES || {
    echo "‚ùå isort failed"
    echo "Run: isort src/ tests/"
    exit 1
}

echo "‚úÖ isort passed"
echo ""

echo "üîç Running flake8..."
flake8 $STAGED_PY_FILES || {
    echo "‚ùå flake8 failed"
    exit 1
}

echo "‚úÖ flake8 passed"
echo ""

echo "üéâ All pre-commit checks passed!"
